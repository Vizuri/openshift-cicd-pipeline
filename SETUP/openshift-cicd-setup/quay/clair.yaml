apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: clair-controller

parameters:

objects:

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: clair
    name: clair
  spec:
    replicas: 1
    selector:
      app: clair
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: clair
      spec:
        containers:
        - args:
          image: quay.io/coreos/clair-jwt:v2.0.5
          imagePullPolicy: Always
          name: clair
          ports:
          - containerPort: 6060
            protocol: TCP
          - containerPort: 6061
            protocol: TCP
          resources:
            limits:
              cpu: 293m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /config
            name: clair-config
          - mountPath: /certs
            name: clair-certs
        serviceAccountName: clair
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: clair-config
          name: clair-config
        - name: clair-certs
          secret:
            secretName: clair-certs
    test: false
    triggers:
    - type: ConfigChange

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: clair
      name: clair
    name: clairsvc
  spec:
    port:
      targetPort: clair-port0
    to:
      kind: Service
      name: clairsvc

- apiVersion: v1
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: clair-config
  data:
    config.yaml: |
      clair:
        database:
          type: pgsql
          options:
            source: postgres://clair:clair@postgres:5432/clair?sslmode=disable
            cacheSize: 16384
        api:
          # The port at which Clair will report its health status. For example, if Clair is running at
          # https://clair.mycompany.com, the health will be reported at
          # http://clair.mycompany.com:6061/health.
          healthport: 6061
      
          port: 6062
          timeout: 900s
      
          # paginationkey can be any random set of characters. *Must be the same across all Clair instances*.
          paginationkey:
      
        updater:
          # interval defines how often Clair will check for updates from its upstream vulnerability databases.
          interval: 6h
          notifier:
            attempts: 3
            renotifyinterval: 1h
            http:
              # QUAY_ENDPOINT defines the endpoint at which Quay Enterprise is running.
              # For example: https://myregistry.mycompany.com
              endpoint: https://quay.apps.ocpdemo.kee.vizuri.com/secscan/notify
              proxy: http://localhost:6063
      
      jwtproxy:
        signer_proxy:
          enabled: true
          listen_addr: :6063
          ca_key_file: /certificates/mitm.key # Generated internally, do not change.
          ca_crt_file: /certificates/mitm.crt # Generated internally, do not change.
          signer:
            issuer: security_scanner
            expiration_time: 5m
            max_skew: 1m
            nonce_length: 32
            private_key:
              type: autogenerated
              options:
                rotate_every: 12h
                key_folder: /config/
                key_server:
                  type: keyregistry
                  options:
                    # QUAY_ENDPOINT defines the endpoint at which Quay Enterprise is running.
                    # For example: https://myregistry.mycompany.com
                    registry: https://quay.apps.ocpdemo.kee.vizuri.com/keys/
      

        verifier_proxies:
        - enabled: true
          # The port at which Clair will listen.
          listen_addr: :6060
      
          # If Clair is to be served via TLS, uncomment these lines. See the "Running Clair under TLS"
          # section below for more information.
          # key_file: /config/clair.key
          # crt_file: /config/clair.crt
      
          verifier:
            # CLAIR_ENDPOINT is the endpoint at which this Clair will be accessible. Note that the port
            # specified here must match the listen_addr port a few lines above this.
            # Example: https://myclair.mycompany.com:6060
            audience: http://clairsvc-quay-enterprise.apps.ocpdemo.kee.vizuri.com 
      
            upstream: http://localhost:6062
            key_server:
              type: keyregistry
              options:
                # QUAY_ENDPOINT defines the endpoint at which Quay Enterprise is running.
                # Example: https://myregistry.mycompany.com
                registry: https://quay.apps.ocpdemo.kee.vizuri.com/keys/
      
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: clair
    name: clairsvc
  spec:
    ports:
    - name: clair-port0
      port: 6060
      protocol: TCP
      targetPort: 6060
    - name: clair-port1
      port: 6061
      protocol: TCP
      targetPort: 6061
    - name: clair-port3
      port: 6062
      protocol: TCP
      targetPort: 6062
    selector:
      app: clair
    sessionAffinity: None
    type: NodePort

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: postgres
    name: postgres
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      iconClass: icon-postgresql
      tags: database,postgresql
    creationTimestamp: null
    generation: 1
    labels:
      app: postgres
      template: postgres
    name: postgres
  spec:
    replicas: 1
    selector:
      name: postgres
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: postgres
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: clair
          - name: POSTGRESQL_PASSWORD
            value: clair
          - name: POSTGRESQL_DATABASE
            value: clair
          image: postgresql
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U postgres -q -d clair -c 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 293m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 100Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgres-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: openshift
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: postgres
      template: postgres
    name: postgres
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: postgres
    sessionAffinity: None
    type: ClusterIP
